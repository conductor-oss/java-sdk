plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'groovy'
}

ext {
    artifactName = 'Conductor Client'
    artifactDescription = 'Conductor OSS client (http)'
}

apply plugin: 'publish-config'

dependencies {
    implementation "com.squareup.okhttp3:okhttp:${versions.okHttp}"

    // test dependencies
    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"

    testImplementation 'org.mockito:mockito-inline:5.2.0'

    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
    testImplementation 'org.codehaus.groovy:groovy:3.0.25'
    testImplementation 'ch.qos.logback:logback-classic:1.5.6'
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.15.2'
}

java {
    withSourcesJar()
    withJavadocJar()

    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sourceSets {
    java21 {
        java {
            srcDirs = ['src/java21/java']
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
    }
}

configurations {
    java21Implementation.extendsFrom implementation
    java21CompileOnly.extendsFrom compileOnly
    java21RuntimeOnly.extendsFrom runtimeOnly
}

tasks.register('compileJava21', JavaCompile) {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
    source = sourceSets.java21.java
    classpath = sourceSets.main.output + configurations.compileClasspath
    destinationDirectory = layout.buildDirectory.dir("classes/java21")
    options.release = 21
}

tasks.jar {
    manifest {
        attributes('Multi-Release': 'true')
    }
    from(tasks.named('compileJava21')) {
        into('META-INF/versions/21')
    }
}

test {
    useJUnitPlatform()
    maxParallelForks = 1
}

shadowJar {
    archiveFileName = "conductor-client-$version-all.jar"
    mergeServiceFiles()
}

tasks.build {
    dependsOn shadowJar
}
def jarTask = tasks.named('jar', Jar)

[17, 21].each { ver ->
    tasks.register("testJarOn$ver", Test) {
        dependsOn(jarTask)
        javaLauncher.set(javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(ver)
        })
        useJUnitPlatform()

        testClassesDirs = sourceSets.test.output.classesDirs

        doFirst {
            def jarFile = jarTask.get().archiveFile.get().asFile

            def rt = sourceSets.test.runtimeClasspath
            rt = rt - sourceSets.main.output

            classpath = files(jarFile) + rt
        }
    }
}