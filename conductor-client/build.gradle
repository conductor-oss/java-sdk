plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'groovy'
}

ext {
    artifactName = 'Conductor Client'
    artifactDescription = 'Conductor OSS client (http)'
}

apply plugin: 'publish-config'

dependencies {
    implementation "com.squareup.okhttp3:okhttp:${versions.okHttp}"
    implementation "org.projectlombok:lombok:${versions.lombok}"

    // test dependencies
    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"

    testImplementation 'org.mockito:mockito-inline:5.2.0'

    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
    testImplementation 'org.codehaus.groovy:groovy:3.0.25'
    testImplementation 'ch.qos.logback:logback-classic:1.5.6'
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.15.2'
}

java {
    withSourcesJar()
    withJavadocJar()
}

test {
    useJUnitPlatform()
    maxParallelForks = 1
}

shadowJar {
    archiveFileName = "conductor-client-$version-all.jar"
    mergeServiceFiles()
}

tasks.build {
    dependsOn shadowJar
}

task delombokTaskResult {
    description 'Delomboks only the TaskResult.java file'
    def srcDelomboked = 'build/delombok-taskresult'
    def srcJava = 'src/main/java'
    def taskResultFile = 'src/main/java/com/netflix/conductor/common/metadata/tasks/TaskResult.java'

    inputs.files file( taskResultFile )
    outputs.dir file( srcDelomboked )

    doLast {
        mkdir srcDelomboked + '/com/netflix/conductor/common/metadata/tasks'
        
        def classpath = configurations.compileClasspath + configurations.testCompileClasspath
        
        def lombokJar = classpath.find { it.name.contains('lombok') }
        if (!lombokJar) {
            throw new GradleException("Lombok jar not found in classpath")
        }
        
        println "Using Lombok jar: ${lombokJar}"
        
        ant.taskdef(
            name: 'delombok',
            classname: 'lombok.delombok.ant.Tasks$Delombok',
            classpath: lombokJar.absolutePath
        )
        
        ant.delombok(
            from: srcJava + '/com/netflix/conductor/common/metadata/tasks',
            to: srcDelomboked + '/com/netflix/conductor/common/metadata/tasks',
            classpath: classpath.asPath,
            encoding: 'UTF-8'
        )

        copy {
            from srcDelomboked + '/com/netflix/conductor/common/metadata/tasks/TaskResult.java'
            into srcJava + '/com/netflix/conductor/common/metadata/tasks'
            rename { String fileName ->
                fileName.replace('TaskResult.java', 'TaskResult.java_delomboked')
            }
        }
        
        println "TaskResult.java has been delomboked successfully!"
    }
}